// ONE TIME program to
//    register specified documents in lessons collection as activities
//
//    reads a file in current directory names 'lessonsToRegister.txt'
//    which has CH_IDs of lessons to find and register as Activities
//
//  run in MONGO SHELL with: load('registerlessons')
//

function legalCH_ID(ch) {
    var chapter = ch.replace(/\s/g,''); //removes 'whitespace'
    if (chapter && chapter.length>0) {
        var legal = db.chapters.find({"_id": chapter});
        if (legal.length() === 0 && chapter) {
            print("************ illegal ch_id:     " + chapter );
            illegalcount++;
            return false;
        } else return true;
    }
}

var lessoncursor;
var count = 0;
var illegalcount = 0;

print('db is ' + db);
print('');

var input = 'lessonsToRegister.txt';
print ('Importing lesson CH_IDs from ' + input);
var file = cat(input);  // read  the file (for now, specifying a path doesnt work)
var candidates = file.split(/[\r\n]+/);  // split file into array of lines containing (DN, FN, CH_IDs)
print ('Processing ' + candidates.length + ' lines');

candidates.forEach( function(lesson) {
    var lessonID = lesson.replace(/\s/g,'');
    if (legalCH_ID(lessonID)) {
        lessoncursor = db.lessons.find({dn: {$regex:lessonID}});
        if (lessoncursor.hasNext()) {
            var lesson = lessoncursor.next();
            var chapter = db.chapters.findOne({'_id': lessonID});
    
            print('checking: ' + lesson.dn + ' for existing ACTIVITY');
            var entry = db.activities.findOne({'dn': lesson.dn, 'ft': 'lesson'});
        
            if (entry) {
                var act = entry;
                act['ch_id'] = [chapter._id];
                if (chapter.key1) act.key1 = chapter.key1;
                if (chapter.key2) act.key2 = chapter.key2;
                if (chapter.key3) act.key3 = chapter.key3;
                if (chapter.key4) act.key4 = lesson.key4;
                print('updating ACTIVITY with ft: ' + act.ft + ' dn: ' + act.dn + ' ch_id: ' + act.ch_id);
            
                if (param !== 'dryrun') db.activities.update({'dn': lesson.dn, 'ft': 'lesson'}, act);
                count += 1;
            } else print ('activity not found for lesson named: ' + lesson.dn);
        } else print ('lesson for ' + lessonID + ' NOT FOUND');
    }
});
print('');
print('found ' + count + ' lessons');
if (param === 'dryrun') print('DRY RUN - no changes made');
else                    print(' and made ACTIVITIES for them');
print('');

