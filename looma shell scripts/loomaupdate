#!/bin/bash
#
#  filename: loomaupdate
#       author: skip
#       date:   Jan-Apr 2019
#
#  used to update a pre-installed Looma by installing new code, database & content
#
#   files to be updated may
#    - be on a USB stick at /media/odroid/LOOMA/loomaupdate
#    - or, on Amazon S3
#
#   file structure expected if on the USB:
#
#      loomaupdate.sh       (this file)
#       Looma/               (full set of new Looma code)
#       Looma/mongo-dump/dump/looma/   (latest mongodump of the new database content)
#       content/*   (folders with new content)
#                   (these are usually NEW folders,
#                      but this can be used to overwrite existing content folders)
#    possibly other content folders, like
#       maps2018/*
#       ePaath/*
#    or other content folders
#
#   steps performed:
#       sync new code files into existing Looma code [or backup existing Looma code to LoomaBAK and replace fully with new code
#       copy mongodb --db looma to loomaBAK
#       mongorestore new mongodb --db looma
#       sync new content files into "content" directory

result () {
    if [[ $1 -ne 0 ]]
    then
        echo "****************************************************************"
        echo "ERROR: previous operation returned $1"
    else
        echo "****************************************************************"
        echo "operation successful"
    fi
}

#
echo "****************************************************************"
echo "START LOOMA UPDATE: updating Looma code, database and content"
echo "****************************************************************"
echo "this a DANGEROUS operation and can disable a Looma. Be sure you have read the instructions"
echo "****************************************************************"
echo

echo "****************************************************************"
echo "Update using Internet connection or USB memory?"
echo -n  " - -enter I for internet, U for USB [I/U]?"; read input

if [[ $input = "U" ]]
then
##########################
# start of USB section
##########################

    echo "****************************************************************"
    echo "    you must insert a USB memory stick which is named LOOMA"
    echo "    be sure the USB filesystem format is FAT32    [*** not NTFS ***]"
    echo "    the USB stick must have the files to be uploaded stored in a top-level folder named 'loomaupdate' "
    echo "****************************************************************"

    cd /media/odroid/LOOMA/loomaupdate # for Linux (different for MAC)

    if [ "$?" -ne 0 ]
    then
        echo "ERROR: couldn't find LOOMA/loomaupdate directory on USB"
        exit 1
    fi

    echo
    echo -n  "- using this directory to get new files ";pwd
    echo

    #       copy current Looma code to LoomaBAK
    echo "- preparing to backup current Looma code to LoomaBAK"
    echo -n  "- - continue [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
        if [ -d /var/www/html/LoomaBAK ]
        then
            rm -r /var/www/html/LoomaBAK;
        fi
        mv    /var/www/html/Looma   /var/www/html/LoomaBAk
        result $?
    else
        echo " - - - SKIPPED: backing up Looma code "
    fi

    #       install new Looma code
    echo
    echo "- preparing to install new Looma code"
    echo -n  "- - continue [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
        #rsync --dry-run -r Looma/ /var/www/html/Looma   #NOTE: slash after "Looma/" and no slash after "/var/www/html/Looma"
        rsync            -r Looma/ /var/www/html/Looma   #NOTE: slash after "Looma/" and no slash after "/var/www/html/Looma"
         result $?
   else
        echo " - - - SKIPPED: installing new Looma code"
    fi

    #       install new Looma database
    echo
    echo "- preparing to install new Looma database"
    echo -n  "- - continue [y/n]?"; read input;

    if [[ $input = "y" ]]
    then
        if [[ -d Looma/mongo-dump/dump/looma ]]
        then
            # mongo loomaBAK  --eval "db.dropDatabase()"               # remove old BAK
            # mongo looma --eval "db.copyDatabase('looma','loomaBAK')" # backup current db
            # mongo looma --eval "db.dropDatabase()"                   # remove current db
            mongorestore --quiet --db looma Looma/mongo-dump/dump/looma/       # install new db changes into existing db
            result $?
        else echo "ERROR: no source dir (LOOMA/looma/mongo-dump/dump/looma) for mongo restore"
        fi
    else
        echo " - - - SKIPPED: installing new Looma database"
    fi

    #       copy new files into "content" directory
    echo
    echo "- preparing to copy new files into content directory"
    echo -n  "- - continue [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
        #echo "- updating the following CONTENT files:" ; ls -l content/; ls -l maps2018/; ls -l ePaath/;
        if [ -d "content" ]
        then
            #rsync  --dry-run -r --stats content/  /var/www/html/content   #NOTE: slash after "content/" and no slash after "/var/www/html/content"
            rsync             -r --stats content/  /var/www/html/content   #NOTE: slash after "content/" and no slash after "/var/www/html/content"
            result $?
        fi
        if [ -d "maps2018" ]
        then
            #rsync --dry-run -r maps2018/ /var/www/html/maps2018  #NOTE: slash after "source/" and no slash after "/var/www/html/maps2018"
            rsync            -r maps2018/ /var/www/html/maps2018  #NOTE: slash after "source/" and no slash after "/var/www/html/maps2018"
        fi
        if [ -d "ePaath" ]
        then
            #rsync --dry-run -r ePaath/   /var/www/html/maps2018  #NOTE: slash after "source/" and no slash after "/var/www/html/ePaath"
            rsync            -r ePaath/   /var/www/html/maps2018  #NOTE: slash after "source/" and no slash after "/var/www/html/ePaath"
        fi
    else
        echo " - - - SKIPPED: installing new Looma content"
    fi
# end of USB section


##########################
# start Internet section
##########################

elif [[ $input = "I" ]]
then
    # test internet presence and speed
    echo "************************************"
    echo "Testing network connection and speed"
    echo "************************************"
    echo
    t=$(date +%s)
    wget http://speedtest.tele2.net/10MB.zip >/dev/null
    s=$(date +%s)
    if [[ $? -eq 4 ]]
    then
        echo "no internet connection found";exit 1;
    else
        echo "****************************************************************"
        echo -n "Internet speed is MB/s: ";expr 8 \* 10 / $(($s - $t))
        echo -n  "- - continue at this speed [y/n]?"; read input;
        if [[ $input != "y" ]]
        then
            exit 1
        fi
    fi

    #       copy current Looma code to LoomaBAK
    echo
    echo "- preparing to backup current Looma code to LoomaBAK"
    echo -n  "- - continue [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
        if [ -d /var/www/html/LoomaBAK ]
        then
            rm -r /var/www/html/LoomaBAK;
        fi
        mv    /var/www/html/Looma   /var/www/html/LoomaBAk
        result $?
    else
        echo " - - - SKIPPED: backing up Looma code "
    fi

    #       install new Looma code
    echo
    echo "- preparing to install new Looma code"
    echo -n  "- - continue [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
       # sync Looma (code)
      #aws s3 sync --dry-run --no-sign-request s3://villagetech.looma/Looma /var/www/html/Looma
      aws s3 sync            --no-sign-request s3://villagetech.looma/Looma /var/www/html/Looma
      result $?
    else
        echo " - - - SKIPPED: installing new Looma code"
    fi

    #       install new Looma database
    echo
    echo "- preparing to update Looma database"
    echo -n  "- - continue [y/n]?"; read input;

    if [[ $input = "y" ]]
    then
        if [[ -d /var/www/html/Looma/mongo-dump/looma ]]
        then
            # mongo loomaBAK  --eval "db.dropDatabase()"               # remove old BAK
            # mongo looma --eval "db.copyDatabase('looma','loomaBAK')" # backup current db
            # mongo looma --eval "db.dropDatabase()"                   # remove current db
            mongorestore --quiet --db looma /var/www/html/Looma/mongo-dump/dump/looma/       # install new db changes into existing db
            result $?
        else echo "ERROR: no source dir (/var/www/html/Looma/mongo-dump/dump/looma) for mongo restore"
        fi
    else
        echo " - - - SKIPPED: update Looma database"
    fi

    #       copy new files into "content" directory
    echo
    echo "- preparing to copy new files into content directory"
    echo -n  "- - continue [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
        #echo "- updating the following CONTENT files:" ; ls -l content/; ls -l maps2018/; ls -l ePaath/;

        #aws s3 sync --dry-run --no-sign-request s3://villagetech.looma/content /var/www/html/content
        aws s3 sync            --no-sign-request s3://villagetech.looma/content /var/www/html/content

        #aws s3 sync --dry-run --no-sign-request s3://villagetech.looma/maps2018 /var/www/html/maps2018
        #aws s3 sync --dry-run --no-sign-request s3://villagetech.looma/ePaath /var/www/html/ePaath
        result $?
    else
        echo " - - - SKIPPED: installing new Looma content"
    fi



# end of Internet section
else
    echo "****************************************************************"
    echo 'ERROR: input must be "U" or "I"'
    echo "****************************************************************"
    exit 1
fi

echo
echo "****************************************************************"
echo "DONE LOOMA UPDATE: updating Looma code, database and content"
echo "****************************************************************"
echo
